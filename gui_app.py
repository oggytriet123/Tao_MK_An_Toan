import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
from password_tool import random_password, kiem_tra_do_dai, COMMON_PASSWORDS, suggest_smart
from vault_manager import load_vault, save_password, delete_password, export_vault, import_vault
from master_manager import verify_master, get_key_from_master, change_master_password

class PasswordApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üîê Tr√¨nh T·∫°o M·∫≠t Kh·∫©u An To√†n")
        self.root.geometry("440x480")
        self.root.configure(bg="#0f1c2e")  # n·ªÅn xanh d∆∞∆°ng ƒë·∫≠m
        self.key = None

        # N·∫øu mu·ªën test nhanh GUI th√¨ d√πng key gi·∫£
        # self.key = b"0" * 32

        if not verify_master():
            messagebox.showerror("L·ªói", "X√°c th·ª±c Master th·∫•t b·∫°i!")
            root.destroy()
            return

        self.key = get_key_from_master()
        if not self.key:
            messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ l·∫•y key t·ª´ Master Password.")
            root.destroy()
            return

        self.create_widgets()

    def create_widgets(self):
        title = ttk.Label(self.root, text="üîê Tr√¨nh T·∫°o M·∫≠t Kh·∫©u", style="Title.TLabel")
        title.pack(pady=15)

        btn_frame = ttk.Frame(self.root)
        btn_frame.pack(pady=10)

        buttons = [
            ("T·∫°o m·∫≠t kh·∫©u m·ªõi", self.tao_mk),
            ("Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u", self.kiem_tra_mk),
            ("Xem vault", self.xem_vault),
            ("Th√™m m·∫≠t kh·∫©u v√†o vault", self.them_mk),
            ("X√≥a m·∫≠t kh·∫©u kh·ªèi vault", self.xoa_mk),
            ("Xu·∫•t vault ra file", self.export_vault),
            ("Nh·∫≠p vault t·ª´ file", self.import_vault),
            ("ƒê·ªïi Master Password", self.doi_master),
        ]

        for text, command in buttons:
            ttk.Button(btn_frame, text=text, command=command, style="Main.TButton").pack(fill="x", pady=4, padx=40)

    def tao_mk(self):
        mk = random_password()

        popup = tk.Toplevel(self.root)
        popup.title("üîê M·∫≠t kh·∫©u m·ªõi")
        popup.configure(bg="#0f1c2e")
        popup.geometry("300x150")

        label = ttk.Label(popup, text="üëâ M·∫≠t kh·∫©u c·ªßa b·∫°n:", style="Title.TLabel")
        label.pack(pady=(10, 5))

        entry = ttk.Entry(popup, font=("Segoe UI", 10))
        entry.insert(0, mk)
        entry.pack(pady=5, padx=20)
        entry.config(state="readonly")

        def copy_to_clipboard():
            self.root.clipboard_clear()
            self.root.clipboard_append(mk)
            messagebox.showinfo("ƒê√£ sao ch√©p", "‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c sao ch√©p!")

        ttk.Button(popup, text="üìã Sao ch√©p", command=copy_to_clipboard, style="Main.TButton").pack(pady=10)

    def kiem_tra_mk(self):
        pw = simpledialog.askstring("Nh·∫≠p m·∫≠t kh·∫©u", "Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn ki·ªÉm tra:")
        if pw:
            score, level, suggestion = kiem_tra_do_dai(pw, COMMON_PASSWORDS)
            msg = f"ƒêi·ªÉm: {score}/100\nƒê√°nh gi√°: {level}"
            if "y·∫øu" in level.lower() or "trung b√¨nh" in level.lower():
                msg += "\n\nü§ñ G·ª£i √Ω m·∫≠t kh·∫©u th√¥ng minh:\n" + "\n".join(suggest_smart(pw, 3))
            messagebox.showinfo("K·∫øt qu·∫£", msg)

    def xem_vault(self):
        vault = load_vault(self.key)
        if not vault:
            messagebox.showinfo("Vault", "üìÇ Vault tr·ªëng.")
        else:
            msg = "\n".join([f"{name}: {pw}" for name, pw in vault.items()])
            messagebox.showinfo("Vault", msg)

    def them_mk(self):
        name = simpledialog.askstring("T√™n t√†i kho·∫£n", "Nh·∫≠p t√™n (v√≠ d·ª•: Gmail, Facebook):")
        pw = simpledialog.askstring("M·∫≠t kh·∫©u", "Nh·∫≠p m·∫≠t kh·∫©u c·∫ßn l∆∞u:")
        if name and pw:
            save_password(name, pw, self.key)
            messagebox.showinfo("Th√†nh c√¥ng", f"‚úÖ ƒê√£ l∆∞u m·∫≠t kh·∫©u cho: {name}")

    def xoa_mk(self):
        name = simpledialog.askstring("X√≥a m·∫≠t kh·∫©u", "Nh·∫≠p t√™n t√†i kho·∫£n c·∫ßn x√≥a:")
        if name:
            delete_password(name)
            messagebox.showinfo("X√≥a", f"üóë ƒê√£ x√≥a m·∫≠t kh·∫©u cho: {name}")

    def export_vault(self):
        export_vault(self.key)

    def import_vault(self):
        import_vault(self.key)

    def doi_master(self):
        change_master_password()

if __name__ == "__main__":
    root = tk.Tk()
    style = ttk.Style(root)
    style.theme_use("clam")

    style.configure("Main.TButton",
                    font=("Segoe UI", 10),
                    padding=6,
                    background="#1e3a5f",
                    foreground="white")
    style.map("Main.TButton",
              background=[("active", "#2a4d7c")],
              foreground=[("active", "white")])

    style.configure("Title.TLabel",
                    font=("Segoe UI", 13, "bold"),
                    background="#0f1c2e",
                    foreground="white")

    app = PasswordApp(root)
    root.mainloop()