import os, json, base64
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

MASTER_FILE = "master_vault.json"

def setup_master():
    """T·∫°o master password, sinh key b·∫±ng PBKDF2, m√£ h√≥a x√°c nh·∫≠n b·∫±ng AES-256"""
    master = input("üîë T·∫°o Master Password m·ªõi: ")
    confirm = input("Nh·∫≠p l·∫°i ƒë·ªÉ x√°c nh·∫≠n: ")
    if master != confirm:
        print("‚ùå M·∫≠t kh·∫©u kh√¥ng kh·ªõp!")
        return

    salt = os.urandom(16)
    iterations = 200_000

    # Sinh key t·ª´ password
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=iterations,
    )
    key = kdf.derive(master.encode())

    # M√£ h√≥a x√°c nh·∫≠n
    aesgcm = AESGCM(key)
    nonce = os.urandom(12)
    encrypted = aesgcm.encrypt(nonce, b"MASTER_OK", None)

    # Ghi ra file JSON
    data = {
        "salt": base64.b64encode(salt).decode(),
        "iterations": iterations,
        "nonce": base64.b64encode(nonce).decode(),
        "encrypted": base64.b64encode(encrypted).decode()
    }

    with open(MASTER_FILE, "w") as f:
        json.dump(data, f, indent=4)

    print("‚úÖ Master Password ƒë√£ ƒë∆∞·ª£c t·∫°o v√† m√£ h√≥a an to√†n!\n")


def verify_master():
    """Y√™u c·∫ßu nh·∫≠p master password, ki·ªÉm tra b·∫±ng AES-256"""
    if not os.path.exists(MASTER_FILE):
        print("‚ö†Ô∏è Ch∆∞a c√≥ master password, c·∫ßn t·∫°o m·ªõi tr∆∞·ªõc.")
        setup_master()
        return

    with open(MASTER_FILE, "r") as f:
        data = json.load(f)

    salt = base64.b64decode(data["salt"])
    iterations = data["iterations"]
    nonce = base64.b64decode(data["nonce"])
    encrypted = base64.b64decode(data["encrypted"])

    password = input("üîê Nh·∫≠p Master Password ƒë·ªÉ m·ªü vault: ")

    # Sinh l·∫°i key t·ª´ master password nh·∫≠p v√†o
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=iterations,
    )

    try:
        key = kdf.derive(password.encode())
        aesgcm = AESGCM(key)
        decrypted = aesgcm.decrypt(nonce, encrypted, None)
        if decrypted == b"MASTER_OK":
            print("‚úÖ X√°c th·ª±c th√†nh c√¥ng! Vault ƒë√£ m·ªü.\n")
            return True
    except Exception:
        pass

    print("üö´ Sai Master Password! Kh√¥ng th·ªÉ truy c·∫≠p vault.\n")
    return False
