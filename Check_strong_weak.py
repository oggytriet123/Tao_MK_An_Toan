import secrets
import string
from cryptography.fernet import Fernet
import tkinter as tk

# T·∫°o m√£ h√≥a key m·ªõi
def generate_key():
    return Fernet.generate_key()

# Danh s√°ch m·∫≠t kh·∫©u ph·ªï bi·∫øn
COMMON_PASSWORDS = ["123456", "password", "qwerty", "admin", "letmein",
                    "12345678", "password1", "123456789", "welcome", "111111"]

KEYBOARD_PATTERNS = ["qwerty", "asdf", "zxcv", "1234", "abcd"]

de_nham = "01lI"

# T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
def random_password(length=16):
    characters = string.ascii_letters + string.digits + string.punctuation
    characters = ''.join(c for c in characters if c not in de_nham)
    password = ''.join(secrets.choice(characters) for i in range(length))
    return password

# Ki·ªÉm tra ƒë·ªô m·∫°nh m·∫≠t kh·∫©u
def KiemTraDoDai(password: str, common_passwords: list) -> tuple:
    score = 0
    length = len(password)
    if length >= 16:
        score += 40
    elif length >= 12:
        score += 30
    elif length >= 8:
        score += 20
    elif length >= 6:
        score += 10

    # Ki·ªÉm tra k√Ω t·ª± c√≥ trong m·∫≠t kh·∫©u
    if any(c.islower() for c in password): score += 15
    if any(c.isupper() for c in password): score += 15
    if any(c.isdigit() for c in password): score += 15
    if any(c in "!@#$%^&*()-_=+[]{}|;:,.<>?/`~" for c in password): score += 15

    # Ki·ªÉm tra k√Ω t·ª± l·∫∑p
    if any(password[i] == password[i+1] == password[i+2] for i in range(len(password)-2)):
        score -= 15

    # Ki·ªÉm tra m·∫´u b√†n ph√≠m d·ªÖ ƒëo√°n
    for pattern in KEYBOARD_PATTERNS:
        if pattern in password.lower():
            score -= 15

    # Ki·ªÉm tra m·∫≠t kh·∫©u ph·ªï bi·∫øn
    if password.lower() in common_passwords:
        score -= 30

    score = max(0, min(100, score))

    # X·∫øp lo·∫°i m·∫≠t kh·∫©u
    if score < 30:
        level = "üî¥ M·∫≠t kh·∫©u y·∫øu !!! ‚ö†Ô∏è"
        suggestion = random_password(16)
    elif score < 60:
        level = "üü° M·∫≠t kh·∫©u trung b√¨nh üôÇ"
        suggestion = random_password(16)
    elif score < 80:
        level = "üü¢ M·∫≠t kh·∫©u m·∫°nh ! üí™"
        suggestion = "M·∫≠t kh·∫©u n√†y ƒë√£ ƒë·ªß m·∫°nh! üëç"
    else:
        level = "üîí M·∫≠t kh·∫©u r·∫•t m·∫°nh !! üöÄ"
        suggestion = "M·∫≠t kh·∫©u n√†y r·∫•t m·∫°nh! üöÄ"

    return score, level, suggestion

# H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫≠p m·∫≠t kh·∫©u
def check_password():
    # L·∫•y m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p v√†o
    pwd = entry_password.get()

    # Ki·ªÉm tra ƒë·ªô m·∫°nh c·ªßa m·∫≠t kh·∫©u
    score, level, suggestion = KiemTraDoDai(pwd, COMMON_PASSWORDS)

    # C·∫≠p nh·∫≠t k·∫øt qu·∫£ v√†o GUI
    level_label.config(text=f"ƒê√°nh gi√°: {level}")
    suggestion_label.config(text=f"G·ª£i √Ω m·∫≠t kh·∫©u: {suggestion}")

# T·∫°o c·ª≠a s·ªï GUI
window = tk.Tk()
window.title("Ki·ªÉm Tra M·∫≠t Kh·∫©u")

# C√†i ƒë·∫∑t giao di·ªán
window.geometry("500x400")

# Nh√£n y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u
label = tk.Label(window, text="Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n:")
label.pack(pady=10)

# V√πng nh·∫≠p m·∫≠t kh·∫©u
entry_password = tk.Entry(window, show="*", width=30)
entry_password.pack(pady=10)

# N√∫t ki·ªÉm tra m·∫≠t kh·∫©u
check_button = tk.Button(window, text="Ki·ªÉm tra m·∫≠t kh·∫©u", command=check_password)
check_button.pack(pady=10)

# Nh√£n hi·ªÉn th·ªã ƒë√°nh gi√°
level_label = tk.Label(window, text="ƒê√°nh gi√°: ")
level_label.pack(pady=10)

# Nh√£n hi·ªÉn th·ªã g·ª£i √Ω m·∫≠t kh·∫©u
suggestion_label = tk.Label(window, text="G·ª£i √Ω m·∫≠t kh·∫©u: ")
suggestion_label.pack(pady=10)

# Kh·ªüi ch·∫°y giao di·ªán
window.mainloop()
